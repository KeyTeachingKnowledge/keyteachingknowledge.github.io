{"version":3,"sources":["assets/colors/colors.js","redux/slices/settings.js","components/HomeScreen/HomeScreen.js","redux/slices/stats.js","components/QuizScreen/subcomponents/InfoBar.js","components/QuizScreen/subcomponents/Question.js","redux/slices/quiz.js","components/QuizScreen/subcomponents/Choices.js","components/QuizScreen/subcomponents/NavigationSection.js","assets/data/QuizEntries.js","components/QuizScreen/subcomponents/EvalPopUp.js","components/QuizScreen/QuizScreen.js","components/StatScreen/StatsScreen.js","components/SettingsScreen/SettingsScreen.js","components/AboutScreen/AboutScreen.js","redux/store.js","App.js","assets/check-icon.png","assets/cross-icon.png","assets/fonts/Poppins-Light.ttf","assets/fonts/Poppins-Regular.ttf","assets/fonts/Poppins-Italic.ttf","assets/fonts/Poppins-Bold.ttf","assets/fonts/Poppins-ExtraBoldItalic.ttf","assets/fonts/Poppins-ExtraBold.ttf"],"names":["darkColors","dark","light","border","lightColors","initialState","colorIndex","discoveryMode","comingFromHome","allColors","allColorsHelper","settingsSlice","createSlice","name","reducers","SetColorIndex","state","action","payload","SetDiscoveryMode","SetComingFromHome","SetAllColors","SetAllColorsHelper","RotateColor","length","actions","Colors","settings","HomeScreen","navigation","quotesList","dispatch","useDispatch","useState","randomQuoteIndex","setRandomQuoteIndex","colors","useSelector","useEffect","interval","setInterval","Math","floor","random","clearInterval","View","style","styles","container","backgroundColor","logoContainer","Text","logo","color","fontSize","fontFamily","quotesContainer","quotesText","playContainer","borderColor","TouchableOpacity","playText","onPress","navigate","StyleSheet","create","flex","textAlign","marginTop","marginBottom","marginHorizontal","maxHeight","minHeight","minWidth","borderWidth","borderRadius","padding","marginVertical","statsSlice","accuracy","SetAccuracy","InfoBar","totalCount","correctAnswers","shownQuestion","quiz","selectedChoices","differenceArray","slice","map","answer","i","stats","setAccuracy","acc","ceil","filter","v","infoBar","infoItem","marginLeft","Q","marginRight","flexDirection","justifyContent","alignItems","width","Question","question","questionContainer","paddingHorizontal","paddingVertical","maxWidth","quizSlice","currentQuestion","selectedChoice","isCorrect","modalVisible","finishFlag","newQuiz","SetCurrentQuestion","SetShownQuestion","SetSelectedChoice","SetSelectedChoices","SetModalVisible","SetFinishFlag","SetIsCorrect","SetNewQuiz","ResetQuiz","IsTraversing","Choices","A0","A1","A2","A3","correct","setIsCorrect","setSelectedChoice","isTraversing","setChoiceHandler","choice","answerStyles","defaultStyle","selectStyle","traverseStyleCorrect","traverseStyleIncorrect","ScrollView","answersContainer","Pressable","selectedAnswer","selectedAnswerCorrect","selectedAnswerIncorrect","onPressIn","letter","selectedLetter","selectedLetterCorrection","answerText","selectedAnswerText","selectedAnswerTextCorrection","maxwidth","NavigationSection","setShownQuestion","setFinishFlag","handleSubmit","setModalVisible","handleBack","submitContainer","submit","submitText","explanation","referTo","centeredView","modalView","margin","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","modalText","checkIcon","EvalPopUp","motivation","React","motivationIndex","setMotivationIndex","setCurrentQuestion","setSelectedChoices","Modal","animationType","transparent","visible","onRequestClose","Image","source","require","QuizScreen","Entries","contentContainerStyle","StatsScreen","winningStreak","setWinningStreak","rank","setRank","longestStreak","currStreak","max","Platform","OS","settingContainer","settingText","SettingsScreen","colorCodes","setColorIndex","setDiscoveryMode","setAllColors","setAllColorsHelper","opacity","AboutScreen","persistConfig","key","storage","AsyncStorage","combineReducers","settingsReducer","quizReducer","statsReducer","persistReducers","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","persistor","persistStore","Stack","createStackNavigator","App","useFonts","fontsLoaded","j","StatusBar","NavigationContainer","Navigator","Screen","options","headerShown","props","title","headerStyle","borderBottomWidth","headerTintColor","headerTitleStyle","AppWrapper","module","exports"],"mappings":"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","file":"static/js/app.df040051.chunk.js","sourcesContent":["\nexport const darkColors = [\n{\n   dark: '#202A44',\n   light: '#FAF9F6',\n   border: '#FAF9F6',\n} // Dark Navy\n,\n\n{\n   dark: '#89ABE3FF',\n   light: '#FCF6F5FF',\n   border: '#FCF6F5FF',\n}  // Dark Sky Blue\n,\n{\n   dark: '#603F83FF',\n   light: '#C7D3D4FF',\n   border: '#C7D3D4FF',    // Royal Purple\n}\n\n,\n{\n   dark: '#755139FF',\n   light: '#F2EDD7FF',\n   border: '#F2EDD7FF',    // Toffee\n}\n,\n\n{\n   dark: '#F95700FF',\n   light: '#FFFFFFFF',\n   border: '#FFFFFFFF',    // Orangica\n}\n,\n{\n   dark: '#00539CFF',\n   light: '#FFD662FF',\n   border: '#FFD662FF',    // Princess\n}\n,\n\n{\n   dark: '#343148FF',\n   light: '#D7C49EFF',\n   border: '#D7C49EFF',       // Eclipse\n}\n,\n{\n   dark: '#A2A2A1FF',\n   light: '#F1F4FFFF',\n   border: '#F1F4FFFF',       // Silver\n}\n,\n{\n   dark: '#317773',\n   light: '#E2D1F9',\n   border: '#E2D1F9',      // Lavender\n}\n,\n{\n   dark: 'black',\n   light: 'white',\n   border: 'white',     //Black\n}\n,\n{\n   dark: '#00203FFF',\n   light: '#ADEFD1FF',\n   border: '#ADEFD1FF',    // Sailor Blue\n}\n,\n\n{\n   dark: '#949398FF',\n   light: '#F4DF4EFF',\n   border: '#F4DF4EFF',    //Lemon\n}\n]\n\n\n\nexport const lightColors = [\n   {\n      light: '#202A44',\n      dark: '#FAF9F6',\n      border: '#202A44'\n   } \n   ,\n   \n   {\n      light: '#89ABE3FF',\n      dark: '#FCF6F5FF',\n      border: '#89ABE3FF'\n   }  \n   ,\n   {\n      light: '#603F83FF',\n      dark: '#C7D3D4FF',\n      border: '#603F83FF'\n   }\n   \n   ,\n   {\n      light: '#755139FF',\n      dark: '#F2EDD7FF',\n      border: '#755139FF'\n   }\n   ,\n   \n   {\n      light: '#F95700FF',\n      dark: '#FFFFFFFF',\n      border: '#F95700FF'\n   }\n   ,\n   {\n      light: '#00539CFF',\n      dark: '#FFD662FF',\n      border: '#00539CFF'\n   }\n   ,\n   \n   {\n      light: '#343148FF',\n      dark: '#D7C49EFF',\n      border: '#343148FF'\n   }\n   ,\n   {\n      light: '#A2A2A1FF',\n      dark: '#F1F4FFFF',\n      border: '#A2A2A1FF'\n   }\n   ,\n   {\n      light: '#317773',\n      dark: '#E2D1F9',\n      border: '#317773'\n   }\n   ,\n   {\n      light: 'black',\n      dark: 'white',\n      border: 'black'\n   }\n   ,\n   {\n      light: '#00203FFF',\n      dark: '#ADEFD1FF',\n      border: '#00203FFF'\n   }\n   ,\n   \n   {\n      light: '#949398FF',\n      dark: '#F4DF4EFF',\n      border: '#949398FF'\n   }\n   ]","import { createSlice } from \"@reduxjs/toolkit\"\nimport {darkColors, lightColors} from '../../assets/colors/colors';\n\n\nconst initialState = {\n   colorIndex: 0,\n   discoveryMode: false,\n   comingFromHome: true,\n   allColors: lightColors,\n   allColorsHelper: 1\n }\n \n const reducers = {\n \n   SetColorIndex(state, action) {\n      state.colorIndex = action.payload\n    },\n    SetDiscoveryMode(state, action) {\n      state.discoveryMode = action.payload\n    },\n    SetComingFromHome(state, action) {\n      state.comingFromHome = action.payload\n    },\n    SetAllColors(state, action) {\n      state.allColors = action.payload\n    },\n    SetAllColorsHelper(state, action) {\n      state.allColorsHelper = action.payload\n    },\n    RotateColor(state) {\n       if(state.discoveryMode){\n         state.colorIndex = (state.colorIndex + 1) % state.allColors.length\n         }\n    }\n\n }\n\nconst settingsSlice = createSlice({name: \"settings\", initialState, reducers})\n\nexport const { SetColorIndex } = settingsSlice.actions\nexport const { SetDiscoveryMode } = settingsSlice.actions\nexport const { SetComingFromHome } = settingsSlice.actions\nexport const { SetAllColors } = settingsSlice.actions\nexport const { RotateColor } = settingsSlice.actions\nexport const { SetAllColorsHelper } = settingsSlice.actions \nexport const Colors = (state) => state.settings.allColors[state.settings.colorIndex];\n\nexport default settingsSlice.reducer","import { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport { Colors } from '../../redux/slices/settings';\nimport { SetComingFromHome } from '../../redux/slices/settings';\nimport { useSelector, useDispatch } from 'react-redux';\nexport default function HomeScreen({ navigation }) {\n   const quotesList = [\n      \"“The more that you read, the more things you will know. The more that you learn, the more places you’ll go.”\",\n      \"“Wisdom is not a product of schooling but of the lifelong attempt to acquire it.”\",\n      '“One learns from books and example only that certain things can be done. Actual learning requires that you do those things.”',\n      '“You don’t understand anything until you learn it more than one way.”',\n      \"“Spoon feeding in the long run teaches us nothing but the shape of the spoon.”\",\n      \"“Anyone who stops learning is old, whether at twenty or eighty. Anyone who keeps learning stays young. The greatest thing in life is to keep your mind young.”\",\n      \"“The beautiful thing about learning is nobody can take it away from you.”\",\n      \"“Tell me and I forget, teach me and I may remember, involve me and I learn.” \",\n      \"“Study without desire spoils the memory, and it retains nothing that it takes in.”\",\n      \"“If you think education is expensive, try estimating the cost of ignorance.”\",\n      \"“I never learned from a man who agreed with me.”\",\n      \"“Curiosity is the wick in the candle of learning.”\"\n   ]\n   const authorList = [\"Dr. Seuss\", \"Albert Einstein\", \"Frank Herbert\", \"Marvin Minsky\", \"E. M. Forster\", \"Henry Ford\", \"B.B. King\", \"Benjamin Franklin\", \"Leonardo da Vinci\", \"Howard Gardner\", \"Robert A. Heinlein\", \"William Arthur Ward\"]\n   const dispatch = useDispatch();\n   const [randomQuoteIndex, setRandomQuoteIndex] = useState(0);\n   const colors = useSelector(Colors)\n   const setComingFromHome = (payload) => dispatch(SetComingFromHome(payload))\n   useEffect(() => {\n      const interval = setInterval(() => {\n         setRandomQuoteIndex(Math.floor(Math.random() * quotesList.length));\n      }, 12500);\n      \n      return () => clearInterval(interval);\n    }, []);\n\n\n\n   return (\n      <View style={[styles.container, {backgroundColor: colors.dark}]}>\n         <View style={styles.logoContainer}>\n            <Text style={[styles.logo, { color: colors.light }]}>\n               Quizzery\n            </Text>\n            <Text style={[styles.logo, { color: colors.light, fontSize: 20, fontFamily: 'Poppins-Bold' }]}>\n               Idioms Edition\n            </Text>\n         </View>\n         <View style={styles.quotesContainer}>\n            <Text style={[styles.quotesText, {color: colors.light}]}>\n               {quotesList[randomQuoteIndex]}\n               {\"\\n\"}\n               —{authorList[randomQuoteIndex]}\n              \n            </Text>\n         </View>\n         <View style={[styles.playContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n            <TouchableOpacity>\n               <Text style={[styles.playText, { color: colors.dark, }]} onPress={\n                  ()=> navigation.navigate('QuizScreen')}>\n                  Play\n               </Text>\n            </TouchableOpacity>\n         </View>\n         <View style={[styles.playContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n            <TouchableOpacity>\n               <Text style={[styles.playText, { color: colors.dark, }]} onPress={()=> {\n                  navigation.navigate('StatsScreen')\n                  setComingFromHome(true) }\n                  }>\n                  My Statistics\n               </Text>\n            </TouchableOpacity>\n         </View>\n         <View style={[styles.playContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n            <TouchableOpacity>\n               <Text style={[styles.playText, { color: colors.dark, }]} onPress={()=> navigation.navigate('SettingsScreen')}>\n                  Settings\n               </Text>\n            </TouchableOpacity>\n         </View>\n         <View style={[styles.playContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n            <TouchableOpacity>\n               <Text style={[styles.playText, { color: colors.dark, }]} onPress={()=> navigation.navigate('AboutScreen')}>\n                  About\n               </Text>\n            </TouchableOpacity>\n         </View>\n\n      </View>\n   )\n}\n\n\nconst styles = StyleSheet.create({\n   container: {\n      flex: 1,\n\n   },\n\n   logo: {\n      fontSize: 70,\n      fontFamily: 'Poppins-ExtraBoldItalic',\n      textAlign: 'center',\n   },\n   logoContainer: {\n      marginTop: 100,\n      marginBottom: 30,\n      marginHorizontal: 20\n   },\n   quotesContainer: {\n      marginHorizontal: 30,\n      marginBottom: 20,\n      maxHeight: 110,\n      minHeight: 110\n   },\n   quotesText: {\n      fontSize: 15,\n      fontFamily: 'Poppins-Regular',\n      textAlign: 'center',\n   },\n   playContainer: {\n      minWidth: '90%',\n      borderWidth: 2,\n      marginHorizontal: 20,\n      borderRadius: 10,\n      padding: 10,\n      marginVertical: 10\n   },\n   playText: {\n      fontFamily: 'Poppins-Bold',\n      fontSize: 17,\n      textAlign: 'center'\n   }\n\n});\n\n","import { createSlice } from \"@reduxjs/toolkit\"\n\n\nconst initialState = {\n   accuracy: '-',\n }\n \n const reducers = {\n \n   SetAccuracy(state, action) {\n      state.accuracy = action.payload + '.0%'\n    },\n }\n\nconst statsSlice = createSlice({name: \"stats\", initialState, reducers})\n\nexport const { SetAccuracy } = statsSlice.actions\n\n\nexport default statsSlice.reducer","import { useEffect } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Colors } from '../../../redux/slices/settings';\nimport { SetAccuracy } from '../../../redux/slices/stats';\nexport default function InfoBar({ totalCount, correctAnswers}){\n  const dispatch = useDispatch();\n  const shownQuestion = useSelector(state => state.quiz.shownQuestion)\n  const colors = useSelector(Colors)\n  const selectedChoices = useSelector(state => state.quiz.selectedChoices);\n  let correctAnswersTrimmed = correctAnswers.slice(0, selectedChoices.length);\n  let differenceArray = correctAnswersTrimmed.map(function (answer, i) {\n    return answer - selectedChoices[i];\n  })\n  const [accuracy, setAccuracy] = [ useSelector(state => state.stats.accuracy), (payload)=> dispatch(SetAccuracy(payload))];\n  useEffect(() => {\n  if (selectedChoices.length > 0) {\n    let acc = Math.ceil((differenceArray.filter(v => v === 0).length / selectedChoices.length) * 100)\n    setAccuracy(acc);\n  }}, [selectedChoices]);\n\n   return (\n     <View style={styles.infoBar}>\n     <View>\n       <Text style={[styles.infoItem,{backgroundColor: colors.light, color: colors.dark, borderColor: colors.border, marginLeft: 'auto'}]}> <Text style={styles.Q}>Question</Text> {shownQuestion+1}/{totalCount}</Text>\n     </View>\n\n     <View>\n       <Text style={[styles.infoItem,{backgroundColor: colors.light, color: colors.dark, borderColor: colors.border, marginRight: 'auto'}]}>📈 {(accuracy=='-.0%')?('-'):(accuracy)}  </Text>\n     </View>\n   </View>\n   )\n }\n\n const styles = StyleSheet.create({\n   infoBar: {\n     flexDirection: 'row',\n     justifyContent: 'space-between',\n     alignItems: 'center',\n     marginTop: 40,\n     width: '93%',\n   },\n   infoItem: {\n     padding: 10,\n     borderRadius: 20,\n     borderWidth: 0.8,\n     fontFamily: 'Poppins-Bold',\n     marginHorizontal: 16\n   },\n \n   \n });\n ","import { StyleSheet, Text, View } from 'react-native';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Colors } from '../../../redux/slices/settings';\n\nexport default function Question({question}) {\n  const colors = useSelector(Colors);\n   return (\n      <View style={[styles.questionContainer, {backgroundColor: colors.light, borderColor: colors.border}]}>\n        <Text style={[styles.question, {color: colors.dark}]}>\n          {question}\n        </Text>\n      </View>\n   )\n}\n\n\nconst styles = StyleSheet.create({\n \n   questionContainer: {\n     marginTop: 20,\n     marginBottom: 30,\n     marginHorizontal: 10,\n     borderRadius: 15,\n     paddingHorizontal: 10,\n     paddingVertical: 25,\n     borderWidth: 1.2,\n     minWidth: '93%',\n     maxWidth: '93%'\n \n   },\n   question: {\n     fontSize: 17,\n     fontFamily: 'Poppins-Bold',\n   }\n   \n });\n \n","import { createSlice } from \"@reduxjs/toolkit\"\n\n\nconst initialState = {\n   currentQuestion: 0,\n   shownQuestion: 0,\n   selectedChoice: -1,\n   selectedChoices: [],\n   isCorrect: -1,\n   modalVisible: false,\n   finishFlag: false,\n   newQuiz: true\n }\n \n const reducers = {\n \n   SetCurrentQuestion(state, action) {\n      state.currentQuestion = action.payload\n    },\n    SetShownQuestion(state, action) {\n      state.shownQuestion = action.payload\n    },\n    SetSelectedChoice(state, action) {\n      state.selectedChoice = action.payload\n    },\n    SetSelectedChoices(state, action) {\n      state.selectedChoices = action.payload\n    },\n    SetModalVisible(state, action) {\n      state.modalVisible = action.payload\n    },\n    SetFinishFlag(state, action) {\n      state.finishFlag = action.payload\n    },\n    SetIsCorrect(state, action) {\n      state.isCorrect = action.payload\n    },\n    SetNewQuiz(state, action) {\n      state.newQuiz = action.payload\n    },\n    ResetQuiz(state){\n      state.currentQuestion = 0;\n      state.shownQuestion = 0;\n      state.isCorrect = -1;\n      state.selectedChoice = -1;\n      state.selectedChoices = [];\n      state.finishFlag = false;\n      state.newQuiz = true;       // means we will randomize upon start then set it to false in app.js\n\n    }\n    \n }\n\nconst quizSlice = createSlice({name: \"quiz\", initialState, reducers})\n\nexport const { SetCurrentQuestion } = quizSlice.actions\nexport const { SetShownQuestion } = quizSlice.actions\nexport const { SetSelectedChoice } = quizSlice.actions\nexport const { SetSelectedChoices } = quizSlice.actions\nexport const { SetModalVisible } = quizSlice.actions\nexport const { SetFinishFlag } = quizSlice.actions\nexport const { SetIsCorrect } = quizSlice.actions\nexport const { ResetQuiz } = quizSlice.actions\nexport const { SetNewQuiz } = quizSlice.actions\nexport const IsTraversing = (state) => (state.quiz.shownQuestion !== state.quiz.currentQuestion)\nexport default quizSlice.reducer\n","import { useContext } from 'react';\nimport { StyleSheet, Text, View, Pressable, ScrollView } from 'react-native';\nimport {  useSelector, useDispatch } from 'react-redux';\nimport { SetSelectedChoice } from \"../../../redux/slices/quiz\";\nimport { SetModalVisible } from \"../../../redux/slices/quiz\";\nimport { SetIsCorrect } from '../../../redux/slices/quiz';\nimport { IsTraversing } from '../../../redux/slices/quiz';\nimport { Colors } from '../../../redux/slices/settings';\n\nexport default function Choices({A0, A1, A2, A3, correct,  correctAnswers }) {\n  const dispatch = useDispatch(); \n  const shownQuestion  = useSelector(state => state.quiz.shownQuestion);\n  const setIsCorrect  = (payload) => dispatch(SetIsCorrect(payload));\n  const [ selectedChoice , setSelectedChoice ] = [ useSelector(state => state.quiz.selectedChoice), (payload) => dispatch(SetSelectedChoice(payload))];\n  const selectedChoices = useSelector(state => state.quiz.selectedChoices);\n  const setModalVisible = (payload) => dispatch(SetModalVisible(payload));\n  const isTraversing = useSelector(IsTraversing);\n  const colors = useSelector(Colors)\n   const setChoiceHandler = (choice) => {\n      if(!isTraversing) {\n      setSelectedChoice(choice);\n      setIsCorrect(choice == correct ? 1 : 0);\n      }\n      if(isTraversing && (selectedChoices[shownQuestion] == choice)){\n        setIsCorrect(selectedChoices[shownQuestion] == correctAnswers[shownQuestion] ? 1 : 0);\n        setModalVisible(true);\n      }\n   };\n\n   const answerStyles = (choice, defaultStyle, selectStyle, traverseStyleCorrect, traverseStyleIncorrect) => { return (\n    [defaultStyle, (selectedChoice == choice) && selectStyle,\n      ((selectedChoices[shownQuestion] == choice) && isTraversing &&\n       ((choice == correctAnswers[shownQuestion])? traverseStyleCorrect: traverseStyleIncorrect))]);}\n\n   return (\n      <ScrollView style={[styles.answersContainer]} >\n      <Pressable style={answerStyles(1, [styles.answer, { borderColor: colors.border, }], [styles.selectedAnswer, { backgroundColor: colors.light,}], styles.selectedAnswerCorrect, styles.selectedAnswerIncorrect)} onPressIn={()=>setChoiceHandler(1)}>\n        <View><Text style={answerStyles(1, [styles.letter, { color: colors.light}], [[styles.selectedLetter, { color: colors.dark,}], { color: colors.dark}], [styles.selectedLetterCorrection, { color: 'white'}], [styles.selectedLetterCorrection, { color: 'white'}])}>A</Text></View>\n        <Text style={answerStyles(1, [styles.answerText, {color: colors.light,}], [styles.selectedAnswerText, { color: colors.dark,}], [styles.selectedAnswerTextCorrection, { color: 'white',}], [styles.selectedAnswerTextCorrection, { color: 'white',}])}>\n          {A0}\n        </Text>\n      </Pressable>\n      <Pressable style={answerStyles(2, [styles.answer, { borderColor: colors.border, }], [styles.selectedAnswer, { backgroundColor: colors.light,}], styles.selectedAnswerCorrect, styles.selectedAnswerIncorrect)} onPressIn={()=>setChoiceHandler(2)}>\n      <View><Text style={answerStyles(2, [styles.letter, { color: colors.light}], [[styles.selectedLetter, { color: colors.dark,}], { color: colors.dark}], [styles.selectedLetterCorrection, { color: 'white'}], [styles.selectedLetterCorrection, { color: 'white'}])}>B</Text></View>\n        <Text style={answerStyles(2, [styles.answerText, {color: colors.light,}], [styles.selectedAnswerText, { color: colors.dark,}], [styles.selectedAnswerTextCorrection, { color: 'white',}], [styles.selectedAnswerTextCorrection, { color: 'white',}])}>\n          {A1}\n        </Text>\n      </Pressable>\n      <Pressable style={answerStyles(3, [styles.answer, { borderColor: colors.border, }], [styles.selectedAnswer, { backgroundColor: colors.light,}], styles.selectedAnswerCorrect, styles.selectedAnswerIncorrect)} onPressIn={()=>setChoiceHandler(3)}>\n      <View><Text style={answerStyles(3, [styles.letter, { color: colors.light}], [[styles.selectedLetter, { color: colors.dark,}], { color: colors.dark}], [styles.selectedLetterCorrection, { color: 'white'}], [styles.selectedLetterCorrection, { color: 'white'}])}>C</Text></View>\n        <Text style={answerStyles(3, [styles.answerText, {color: colors.light,}], [styles.selectedAnswerText, { color: colors.dark,}], [styles.selectedAnswerTextCorrection, { color: 'white',}], [styles.selectedAnswerTextCorrection, { color: 'white',}])}>\n          {A2}\n        </Text>\n      </Pressable>\n      <Pressable style={answerStyles(4, [styles.answer, { borderColor: colors.border, }], [styles.selectedAnswer, { backgroundColor: colors.light,}], styles.selectedAnswerCorrect, styles.selectedAnswerIncorrect)} onPressIn={()=>setChoiceHandler(4)}>\n      <View><Text style={answerStyles(4, [styles.letter, { color: colors.light}], [[styles.selectedLetter, { color: colors.dark,}], { color: colors.dark}], [styles.selectedLetterCorrection, { color: 'white'}], [styles.selectedLetterCorrection, { color: 'white'}])}>D</Text></View>\n        <Text style={answerStyles(4, [styles.answerText, {color: colors.light,}], [styles.selectedAnswerText, { color: colors.dark,}], [styles.selectedAnswerTextCorrection, { color: 'white',}], [styles.selectedAnswerTextCorrection, { color: 'white',}])}>\n          {A3}\n        </Text>\n      </Pressable>\n      </ScrollView>\n   );\n}\n\n\nconst styles = StyleSheet.create({\n\n   answersContainer: {\n     maxWidth: '93%',\n     minWidth: '93%',\n   },\n\n    letter: {\n      fontFamily: 'Poppins-Bold',\n      fontSize: 20,\n      marginLeft: 10,\n    },\n    selectedLetter: {\n      fontFamily: 'Poppins-ExtraBold',\n      fontSize: 23,\n      marginLeft: 10,\n    },\n  \n   answer: {\n     maxwidth: '100%',\n     minWidth: '100%',\n     paddingVertical: 10,\n     marginVertical: 10,\n     backgroundColor: 'rgba(0,0,0,0)',\n     borderRadius: 20,\n     borderWidth: 1.5,\n     flexDirection: 'row',\n     alignItems: 'center',\n     paddingHorizontal: 10,\n   },\n   selectedAnswer: {\n      \n   },\n   selectedLetterCorrection: {\n      \n  },\n   selectedAnswerCorrect: {\n      backgroundColor: '#32c953',   \n      borderColor: '#029943',\n   },\n    selectedAnswerIncorrect: {\n      backgroundColor: '#c93232',  \n      borderColor: '#993232',\n    },\n   answerText: {\n    paddingHorizontal: 25,\n    fontFamily: 'Poppins-Regular',\n  },\n   selectedAnswerText: {\n      \n      fontFamily: 'Poppins-Regular',\n   },\n   selectedAnswerTextCorrection: {\n    \n    fontFamily: 'Poppins-Regular',\n },\n  \n });\n ","import { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { SetShownQuestion } from \"../../../redux/slices/quiz\";\nimport { SetSelectedChoice } from \"../../../redux/slices/quiz\";\nimport { SetModalVisible } from \"../../../redux/slices/quiz\";\nimport { SetFinishFlag  } from '../../../redux/slices/quiz';\nimport { IsTraversing } from '../../../redux/slices/quiz';\nimport { Colors } from '../../../redux/slices/settings';\nimport { SetComingFromHome } from '../../../redux/slices/settings';\nimport { SetIsCorrect } from '../../../redux/slices/quiz';\n\nexport default function NavigationSection({ navigation,  totalCount }) {\n   const dispatch = useDispatch();\n   const isTraversing = useSelector(IsTraversing);\n   const  currentQuestion  = useSelector(state => state.quiz.currentQuestion)\n   const [shownQuestion , setShownQuestion] = [ useSelector(state => state.quiz.shownQuestion), (payload) => dispatch(SetShownQuestion(payload))];\n   const [finishFlag, setFinishFlag] = [ useSelector(state => state.quiz.finishFlag), (payload) => dispatch(SetFinishFlag(payload))];\n   const setSelectedChoice = (payload) => dispatch(SetSelectedChoice(payload));\n   const setModalVisible = (payload) => dispatch(SetModalVisible(payload));\n   const isCorrect = useSelector(state => state.quiz.isCorrect);\n   const setIsCorrect = (payload) => dispatch(SetIsCorrect(payload))\n   const colors = useSelector(Colors)\n   const setComingFromHome = (payload)=> dispatch(SetComingFromHome(payload))\n   const handleSubmit = () => {\n      if(finishFlag){\n         navigation.navigate('StatsScreen')\n         setComingFromHome(false)\n      }\n      if (isCorrect != -1 && !finishFlag) {\n         setModalVisible(true);\n      }\n      if(currentQuestion == totalCount -1 && isCorrect != -1){\n         setFinishFlag(true);\n      }\n      \n   }\n\n   const handleNext = () => {\n      if(shownQuestion + 1 == currentQuestion)   setIsCorrect(-1)\n      setShownQuestion((shownQuestion + 1) % totalCount);\n      \n   }\n\n   const handleBack = () => {\n      if (shownQuestion > 0 && shownQuestion < totalCount) {\n         setShownQuestion((shownQuestion - 1) % totalCount);\n         setSelectedChoice(-1);\n         setIsCorrect(-1)\n      }\n   }\n\n   useEffect(() => {\n      if(currentQuestion===totalCount-1){\n         setFinishFlag(true);\n      }},[]);\n\n\n   return (\n      <View style={styles.container}>\n         <View style={[styles.submitContainer, { backgroundColor: colors.light, borderColor: colors.border }, (isCorrect == -1 && !isTraversing) ? { backgroundColor: colors.dark } : { backgroundColor: colors.light }]}>\n            <TouchableOpacity style={[styles.submit]} onPress={() => (!isTraversing || ((currentQuestion == totalCount) && (shownQuestion == totalCount - 1))) ? handleSubmit():handleNext() }>\n               {(!isTraversing || ((currentQuestion == totalCount) && (shownQuestion == totalCount - 1))) ?\n                  (\n                     <Text style={[styles.submitText,   { color: colors.dark, }, ((isCorrect == -1) && !finishFlag) && { color: colors.light }]} >\n                        {( finishFlag ) ? 'See Results' : 'Submit'}\n                     </Text>\n                  )\n                  : (\n                     <Text style={[styles.submitText, { color: colors.dark, }]} >\n                        Next Question\n                     </Text>\n                  )\n               }\n            </TouchableOpacity>\n         </View>\n         {(shownQuestion > 0) &&\n            <View style={[styles.submitContainer, { borderColor: colors.dark, backgroundColor: colors.light }]}>\n               <TouchableOpacity style={styles.submit} onPress={() => handleBack()}>\n                  <Text style={[styles.submitText, { color: colors.dark }]}>\n                     Previous Question\n                  </Text>\n               </TouchableOpacity>\n            </View>\n         }\n      </View>\n   )\n}\n\n\nconst styles = StyleSheet.create({\n   container: {\n      flex: 1,\n      alignItems: 'center',\n      width: '93%'\n   },\n\n   submitContainer: {\n      maxwidth: '100%',\n      minWidth: '100%',\n      borderWidth: 2,\n      marginHorizontal: 20,\n      borderRadius: 10,\n      padding: 10,\n      marginVertical: 10,\n   },\n   submitText: {\n      fontFamily: 'Poppins-Bold',\n      fontSize: 17,\n      textAlign: 'center'\n   }\n});\n\n","\n export default  [\n  {\n    Q: \"Which of the following is an idiom you'd say say after making a wrong decision?'\",\n    A0: \"I shot myself in the foot by...\",\n    A1: \"I'm behind schedule\",\n    A2: \"It fell short of my expectations\",\n    A3: \"It went over my head\",\n    correct: '1',\n    explanation: \"Shooting yourself in the foot would really hurt!\",\n    referTo: \"Lesson 11 on Idioms\"\n  },\n\n  {\n    Q: \"Which of the following is an idiom you'd say when the situation is hopeless?\",\n    A0: \"Let's pull an all-nigher\",\n    A1: \"This isn't going to work. We're shuffling  deck chairs on the Titanic\",\n    A2: \"The professor likes to go off on tangents\",\n    A3: \"Time to get the ball rolling!\",\n    correct: '2',\n    explanation: \"Shuffling deck chairs on the Titanic is a metaphor for doing something useless\",\n\n  },\n\n\n  {\n    Q: \"Which of the following is an idiom you'd if there is something you plan on getting back to later but soon?\",\n    A0: \"It's on the back burner\",\n    A1: \"It's a piece of cake\",\n    A2: \"It's a randezvous problem\",\n    A3: \"It's on the agenda\",\n    correct: '4',\n    explanation: \"If something is on the agenda, then it will be considered in the future\",\n  },\n\n\n  {\n    Q: \"Which of the following is not an idiom you would say when faced with (hard) decisions?\",\n    A0: \"I'm at a crossroads\",\n    A1: \"I'm caught between a rock and a hard place\",\n    A2: \"I'm caught between the devil and the deep blue sea\",\n    A3: \"I passed with flying colors\",\n    correct: '4',\n    explanation: \"The first three are all idioms that mean you have to make a choice (difficult choice for the last two)\",\n\n  },\n\n  {\n    Q: \"Which of the following is not an idiom you would say when comparing two things X and Y?\",\n    A0: \"X pales in comparison to Y\",\n    A1: \"X is skating on thin ice with Y\",\n    A2: \"X has an edge over Y\",\n    A3: \"X doesn't stack up well against Y\",\n    correct: '2',\n    explanation: \"To be skating on thin ice means to be in a dangerous situation. Y is irrelevant in that case, unlike the three other options\",\n\n  },\n\n ]","import React from \"react\";\nimport { Image, Modal, StyleSheet, Text, Pressable, View } from \"react-native\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SetCurrentQuestion } from \"../../../redux/slices/quiz\";\nimport { SetShownQuestion } from \"../../../redux/slices/quiz\";\nimport { SetSelectedChoice } from \"../../../redux/slices/quiz\";\nimport { SetSelectedChoices } from \"../../../redux/slices/quiz\";\nimport { SetModalVisible } from \"../../../redux/slices/quiz\";\nimport { SetIsCorrect } from \"../../../redux/slices/quiz\";\nimport { IsTraversing } from \"../../../redux/slices/quiz\";\nimport { Colors } from \"../../../redux/slices/settings\";\nconst EvalPopUp = ({ explanation, referTo, totalCount, correctAnswers}) => {\n  const letters = [\"A\", \"B\", \"C\", \"D\"];\n  const motivation = [\"keep it up!\", \"you're doing great!\", \"Great Job!\", \"You're on fire!\", \"Good on you!\", \"There you go!\", \"Bravo!\"];\n  const [motivationIndex, setMotivationIndex] = React.useState(0);\n  const dispatch = useDispatch();\n  const [ currentQuestion , setCurrentQuestion ] = [ useSelector(state => state.quiz.currentQuestion), (payload) => dispatch(SetCurrentQuestion(payload))];\n  const [ shownQuestion , setShownQuestion ] = [ useSelector(state => state.quiz.shownQuestion), (payload) => dispatch(SetShownQuestion(payload))];\n  const [ selectedChoice , setSelectedChoice ] = [ useSelector(state => state.quiz.selectedChoice), (payload) => dispatch(SetSelectedChoice(payload))];\n  const [ selectedChoices, setSelectedChoices] = [ useSelector(state => state.quiz.selectedChoices), (payload) => dispatch(SetSelectedChoices(payload))];\n  const [ modalVisible, setModalVisible ] = [ useSelector(state => state.quiz.modalVisible), (payload) => dispatch(SetModalVisible(payload))];\n  const [ isCorrect, setIsCorrect ] = [ useSelector(state => state.quiz.isCorrect), (payload) => dispatch(SetIsCorrect(payload))];\n  const isTraversing = useSelector(IsTraversing);\n  const colors = useSelector(Colors)\n  return (\n    <View style={styles.centeredView}>\n      {(isCorrect !== -1) && <Modal\n        animationType={\"slide\"}\n        transparent={true}\n        visible={modalVisible}\n        onRequestClose={() => {\n          setModalVisible(!modalVisible);\n        }}\n      >\n        <View style={styles.centeredView}>\n          <View style={[styles.modalView, {backgroundColor: colors.light, borderColor: 'white'}]}>\n            {(isCorrect == 1 ) ? \n            (\n              <>\n                <Image style={styles.checkIcon} source={require('../../../assets/check-icon.png')}></Image>\n                <Text style={[styles.modalText, {color: colors.dark, fontFamily: 'Poppins-Bold', fontSize: 19 }]}>{(!isTraversing)?\"That's correct!\":\"That was correct!\"}</Text>\n                {(isTraversing)?\n                <>\n                 <Text style={[styles.modalText, {color: colors.dark,}]}>\n                 <Text style={{ fontFamily: 'Poppins-Bold' }}>Explanation:{\"\\n\"} </Text>\n                 <Text>{explanation}</Text>\n               </Text>\n               {(referTo)?\n               <Text style={[styles.modalText, {color: colors.dark}]}>\n                <Text style={{ fontFamily: 'Poppins-Bold' }}>Refer to:{\"\\n\"}</Text>\n                <Text>{referTo}</Text>\n              </Text>:null\n              }\n              </>\n              :null}\n                {(!isTraversing)? <Text style={{ fontFamily: 'Poppins-Regular', fontSize: 17, color: colors.dark }}>{motivation[motivationIndex]}</Text>:null}\n              </>\n            ) \n            :\n            ((isCorrect == 0)?( \n            <>\n              <Image style={styles.checkIcon} source={require('../../../assets/cross-icon.png')}></Image>\n              <Text style={[styles.modalText, {color: colors.dark}, { fontFamily: 'Poppins-Bold', fontSize: 19 }]}>{(!isTraversing)?\"That isn't correct!\":\"That wasn't correct!\"}</Text>\n              <Text style={{ color: colors.dark, fontFamily: 'Poppins-Regular', fontSize: 17 }}><Text style={{ fontFamily: 'Poppins-Bold', fontSize: 17 }}>{letters[correctAnswers[shownQuestion] - 1]}</Text> is the correct answer.</Text>\n              <Text style={[styles.modalText, {color: colors.dark}]}>\n                <Text style={{ fontFamily: 'Poppins-Bold' }}>Explanation:{\"\\n\"} </Text>\n                <Text>{explanation}</Text>\n              </Text>\n              {(referTo)?\n              <Text style={[styles.modalText, {color: colors.dark}]}>\n                <Text style={{ fontFamily: 'Poppins-Bold' }}>Refer to:{\"\\n\"}</Text>\n                <Text>{referTo}</Text>\n              </Text>:null\n              }\n              </>\n              ):(null))\n              }\n             <Pressable\n              style={[styles.submitContainer, {backgroundColor: colors.dark, borderColor: colors.light}]}\n              onPress={() => {\n                setModalVisible(!modalVisible)\n                if (!isTraversing && (currentQuestion < totalCount - 1) ) {\n                  setCurrentQuestion((currentQuestion + 1))\n                  setShownQuestion((currentQuestion + 1))\n                  setIsCorrect(-1);\n                  setSelectedChoices([...selectedChoices, selectedChoice])\n                  setSelectedChoice(-1);\n                  setMotivationIndex(Math.floor(Math.random() * motivation.length))\n                }\n                if ( currentQuestion == totalCount - 1){\n                  setCurrentQuestion((currentQuestion + 1))\n                  setSelectedChoices([...selectedChoices, selectedChoice])\n                }\n              }}\n            >\n              <Text style={[styles.submitText, { color: colors.light }]}>\n                {(!isTraversing && (currentQuestion != totalCount-1)) ? (\"Next Question\") : (\"Okay\")}\n                </Text>\n            </Pressable>\n          </View>\n        </View>\n      </Modal>}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  centeredView: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 22,\n  },\n  modalView: {\n    margin: 20,\n    maxWidth: '93%',\n    borderWidth:1,\n    borderRadius: 28,\n    padding: 35,\n    alignItems: \"center\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  submitContainer: {\n    width: '90%',\n    borderWidth: 2,\n    marginHorizontal: 20,\n    borderRadius: 14,\n    padding: 10,\n    marginVertical: 10\n  },\n  modalText: {\n    fontFamily: 'Poppins-Regular',\n    color: 'black',\n    fontSize: 17,\n    textAlign: 'center'\n\n  },\n  submitText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: 17,\n    textAlign: 'center'\n\n  },\n  checkIcon: {\n    width: 50,\n    height: 50,\n    marginTop: 10\n  }\n\n});\n\nexport default EvalPopUp;","import { StyleSheet, ScrollView, View } from 'react-native';\nimport { useSelector } from 'react-redux';\nimport { Colors } from '../../redux/slices/settings';\nimport InfoBar from './subcomponents/InfoBar';\nimport Question from './subcomponents/Question';\nimport Choices from './subcomponents/Choices';\nimport  NavigationSection  from './subcomponents/NavigationSection';\nimport Entries from '../../assets/data/QuizEntries';\nimport EvalPopUp from './subcomponents/EvalPopUp';\n\n\nconst QuizScreen = ({totalCount, correctAnswers, navigation, shownQuestion}) => {\n  const colors = useSelector(Colors)\n  return (\n      <View style={[styles.container, { backgroundColor: colors.dark }]}>\n        <InfoBar  totalCount={totalCount} correctAnswers={correctAnswers} />\n        <Question  question={Entries[shownQuestion].Q} />\n        <ScrollView  style={{ width:'100%', height: 600}} contentContainerStyle={{alignItems: 'center'}}>\n          <Choices  A0={Entries[shownQuestion].A0} A1={Entries[shownQuestion].A1} A2={Entries[shownQuestion].A2} A3={Entries[shownQuestion].A3}\n            correct={Entries[shownQuestion].correct} \n             correctAnswers={correctAnswers} />\n          <NavigationSection navigation={navigation}   \n            totalCount={totalCount}  />\n        </ScrollView>\n        <EvalPopUp  explanation={Entries[shownQuestion].explanation} referTo={Entries[shownQuestion].referTo}\n         totalCount={totalCount} \n           correctAnswers={correctAnswers}\n          />\n      </View>\n  );\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n\n  submitContainer: {\n    width: '90%',\n    marginHorizontal: 20,\n    borderRadius: 10,\n    padding: 10,\n    marginVertical: 10\n  },\n  submitText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: 17,\n    textAlign: 'center'\n  }\n\n});\n\nexport default QuizScreen;","import { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Colors } from '../../redux/slices/settings';\nimport { ResetQuiz } from '../../redux/slices/quiz';\nimport { SetAccuracy } from '../../redux/slices/stats';\nimport { Platform } from 'react-native';\n\nexport default function StatsScreen({ correctAnswers, navigation }) {\n   const dispatch = useDispatch();\n   const colors = useSelector(Colors);\n   const comingFromHome = useSelector(state => state.settings.comingFromHome);\n   const resetQuiz = () => dispatch(ResetQuiz());\n   const selectedChoices = useSelector(state => state.quiz.selectedChoices);\n   let correctAnswersTrimmed = correctAnswers.slice(0, selectedChoices.length);\n   let differenceArray = correctAnswersTrimmed.map(function (answer, i) {\n      return answer - selectedChoices[i];\n   });\n   const [accuracy, setAccuracy] = [ useSelector(state => state.stats.accuracy), (payload)=> dispatch(SetAccuracy(payload))];\n   const [winningStreak, setWinningStreak] = useState('0');\n   const [rank, setRank] = useState('-');\n   useEffect(() => {\n      if (selectedChoices.length > 0) {\n         let acc = Math.ceil((differenceArray.filter(v => v === 0).length / selectedChoices.length) * 100)\n         setAccuracy(acc);\n         let longestStreak = 0\n         let currStreak = 0\n         let i = 0\n         while (i < differenceArray.length) {\n            if (differenceArray[i] == 0) {\n               currStreak += 1\n            }\n            else {\n               longestStreak = Math.max(longestStreak, currStreak)\n               currStreak = 0\n            }\n            i++\n         }\n         setWinningStreak( Math.max(longestStreak, currStreak))\n\n         if (acc < 10)\n            setRank('Wood 🪵')\n         else if (acc < 25)\n            setRank('Iron 🪨')\n         else if (acc < 35)\n            setRank('Bronze 🔱')\n         else if (acc < 45)\n            setRank('Silver ⚓')\n         else if (acc < 60)\n            setRank('Gold 🎖')\n         else if (acc < 70)\n            setRank('Platinum 💠')\n         else if (acc < 80)\n            setRank('Diamond 💎')\n         else if (acc < 95)\n            setRank('Master 👑')\n         else if (acc < 98)\n            setRank('Professor 🎓')\n         else\n            setRank('Legend 🐉')\n      }\n\n   }, [selectedChoices])\n\n\n\n\n   return (\n      <View style={[styles.container, { backgroundColor: colors.dark }]}>\n         {(Platform.OS !== 'web')&&<View style={styles.logoContainer}>\n            <Text style={[styles.logo, { color: colors.light }]}>\n               Statistics\n            </Text>\n         </View>}\n\n         <View style={[styles.settingContainer, { backgroundColor: colors.dark, borderColor: colors.light }]}>\n            <Text style={[styles.settingText, { color: colors.light, }]} onPress={() => {\n            }}>\n               Your Highest Accuracy is\n            </Text>\n            <Text style={[styles.settingText, { color: colors.light, fontSize: 50 }]} onPress={() => {\n            }}>\n              {(accuracy=='-.0%')?('-'):(accuracy)} \n            </Text>\n         </View>\n\n         <View style={[styles.settingContainer, { backgroundColor: colors.dark, borderColor: colors.light }]}>\n            <Text style={[styles.settingText, { color: colors.light, }]} onPress={() => {\n            }}>\n               Your Longest Winning Streak is\n            </Text>\n            <Text style={[styles.settingText, { color: colors.light, fontSize: 50 }]} onPress={() => {\n            }}>\n               {winningStreak}\n            </Text>\n         </View>\n\n         <View style={[styles.settingContainer, { backgroundColor: colors.dark, borderColor: colors.light }]}>\n            <Text style={[styles.settingText, { color: colors.light, }]} onPress={() => {\n            }}>\n               Your Overall Rank is\n            </Text>\n            <Text style={[styles.settingText, { color: colors.light, fontSize: 50 }]} onPress={() => {\n            }}>\n               {rank}\n            </Text>\n         </View>\n\n         <View style={[styles.settingContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n                  <TouchableOpacity>\n                     <Text style={[styles.settingText, { color: colors.dark, }]} onPress={() => {\n                        resetQuiz()\n                        setAccuracy('-');\n                        setWinningStreak('0');\n                        setRank('-');\n                     }}>\n                        Reset Progress\n                     </Text>\n                  </TouchableOpacity>\n               </View>\n\n         {(!comingFromHome) ? (\n            <>\n\n               <View style={[styles.settingContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n                  <TouchableOpacity>\n                     <Text style={[styles.settingText, { color: colors.dark, }]} onPress={() => {\n                       navigation.navigate('HomeScreen')\n                     }}>\n                        Home\n                     </Text>\n                  </TouchableOpacity>\n               </View>\n            </>) : null}\n\n\n\n\n\n      </View>\n   )\n}\n\n\nconst styles = StyleSheet.create({\n   container: {\n      flex: 1,\n\n   },\n   logo: {\n      fontSize: 40,\n      fontFamily: 'Poppins-Regular',\n      textAlign: 'left',\n   },\n   logoContainer: {\n      marginTop: 50,\n      marginBottom: 10,\n      marginHorizontal: 20\n   },\n\n\n   settingContainer: {\n      minWidth: '90%',\n      borderWidth: 2,\n      marginHorizontal: 20,\n      borderRadius: 10,\n      padding: 10,\n      marginVertical: 10\n   },\n   settingText: {\n      fontFamily: 'Poppins-Bold',\n      fontSize: 17,\n      textAlign: 'center'\n   }\n\n});\n\n","import { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport {darkColors, lightColors} from '../../assets/colors/colors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SetColorIndex } from '../../redux/slices/settings';\nimport { SetDiscoveryMode } from '../../redux/slices/settings';\nimport { SetAllColors} from '../../redux/slices/settings';\nimport { SetAllColorsHelper } from '../../redux/slices/settings';\nimport { Colors } from '../../redux/slices/settings';\nimport { Platform } from 'react-native';\n\nexport default function SettingsScreen() {\n   const colors = useSelector(Colors)\n   const colorCodes = [\"Navy\", \"Blue Sky\", \"Purple Monarchy\", \"Toffee\", \"Orangica\", \"Pink Princess\", \"Deep Eclipse\", \"Moon Silver\", \"Lavender\", \"Pitch Black\", \"Blue Sailor\", \"Lime\"];\n   const dispatch = useDispatch();\n   const [colorIndex, setColorIndex] = [ useSelector(state => state.settings.colorIndex), (payload)=> dispatch(SetColorIndex(payload))];\n   const [discoveryMode, setDiscoveryMode] = [ useSelector(state => state.settings.discoveryMode), (payload)=> dispatch(SetDiscoveryMode(payload))];\n   const [allColors, setAllColors] = [ useSelector(state => state.settings.allColors), (payload)=> dispatch(SetAllColors(payload))];\n   const [allColorsHelper, setAllColorsHelper] = [useSelector(state => state.settings.allColorsHelper), (payload)=>dispatch(SetAllColorsHelper(payload))]\n   const shownQuestion = useSelector(state => state.quiz.shownQuestion)\n\n\n   return (\n      <View style={[styles.container, {backgroundColor: colors.dark}]}>\n         {(Platform.OS !== 'web')&&<View style={styles.logoContainer}>\n            <Text style={[styles.logo, { color: colors.light }]}>\n               Settings\n            </Text>\n         </View>}\n         <View style={[styles.settingContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n            <TouchableOpacity>\n               <Text style={[styles.settingText, { color: colors.dark, }]} onPress={() => { \n                  if(allColorsHelper == 1){\n                     setAllColors(darkColors)\n                     setAllColorsHelper(0)\n                  }\n                  else {\n                     setAllColors(lightColors)\n                     setAllColorsHelper(1)\n                  }\n                  \n               }}>\n                  Theme: {(allColorsHelper === 1) ? \"Light\" : \"Dark\"}\n               </Text>\n            </TouchableOpacity>\n         </View>\n\n         <View style={[styles.settingContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n            <TouchableOpacity>\n               <Text style={[styles.settingText, { color: colors.dark, }]} onPress={() => { \n                  setDiscoveryMode(!discoveryMode);\n               }}>\n                  Discovery Mode: {(discoveryMode) ? \"On\" : \"Off\"}\n               </Text>\n            </TouchableOpacity>\n         </View>\n\n         <View opacity={(discoveryMode)? 0.8 : 1.0} style={[styles.settingContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n            <TouchableOpacity>\n               <Text style={[styles.settingText, { color: colors.dark, }]} onPress={() => { \n                  if(!discoveryMode) {\n                  setColorIndex((colorIndex + 1)%(colorCodes.length))\n                  }\n                  }}>\n                Color Pallete: {colorCodes[colorIndex]} \n               </Text>\n            </TouchableOpacity>\n         </View>\n\n      </View>\n   )\n}\n\n\nconst styles = StyleSheet.create({\n   container: {\n      flex: 1,\n\n   },\n   logo: {\n      fontSize: 40,\n      fontFamily: 'Poppins-Regular',\n      textAlign: 'left',\n   },\n   logoContainer: {\n      marginTop: 50,\n      marginBottom: 10,\n      marginHorizontal: 20\n   },\n\n\n   settingContainer: {\n      minWidth: '90%',\n      borderWidth: 2,\n      marginHorizontal: 20,\n      borderRadius: 10,\n      padding: 10,\n      marginVertical: 10\n   },\n   settingText: {\n      fontFamily: 'Poppins-Bold',\n      fontSize: 17,\n      textAlign: 'left'\n   }\n\n});\n\n","import { useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Linking } from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Colors } from '../../redux/slices/settings';\nimport { ResetQuiz } from '../../redux/slices/quiz';\nimport { SetAccuracy } from '../../redux/slices/stats';\nimport { Platform } from 'react-native';\n\n\nexport default function AboutScreen({ correctAnswers, navigation }) {\n   const colors = useSelector(Colors);\n   const comingFromHome = useSelector(state => state.settings.comingFromHome);\n\n\n   return (\n      <View style={[styles.container, { backgroundColor: colors.dark }]}>\n         {(Platform.OS !== 'web')&& <View style={styles.logoContainer}>\n            <Text style={[styles.logo, { color: colors.light }]}>\n               About\n            </Text>\n         </View>}\n\n         <View style={[styles.settingContainer, { backgroundColor: colors.dark, borderColor: colors.light }]}>\n            <Text style={[styles.settingText, { color: colors.light, }]} onPress={() => {\n            }}>\n               Have fun learning! Thank you for using the app.\n            </Text>\n\n         </View>\n\n\n\n         <View style={[styles.settingContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n                  <TouchableOpacity onPress={ ()=>{ }}>\n                     <Text style={[styles.settingText, { color: colors.dark, }]}>\n                       Thank You\n                     </Text>\n                  </TouchableOpacity>\n               </View>\n\n      </View>\n   )\n}\n\n\nconst styles = StyleSheet.create({\n   container: {\n      flex: 1,\n\n   },\n   logo: {\n      fontSize: 40,\n      fontFamily: 'Poppins-Regular',\n      textAlign: 'left',\n   },\n   logoContainer: {\n      marginTop: 50,\n      marginBottom: 10,\n      marginHorizontal: 20\n   },\n\n   settingContainer: {\n      minWidth: '90%',\n      borderWidth: 2,\n      marginHorizontal: 20,\n      borderRadius: 10,\n      padding: 10,\n      marginVertical: 10\n   },\n   settingText: {\n      fontFamily: 'Poppins-Bold',\n      fontSize: 17,\n      textAlign: 'center'\n   }\n\n});\n\n","import { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { persistReducer, persistStore } from 'redux-persist';\nimport settingsReducer from './slices/settings';\nimport quizReducer from './slices/quiz';\nimport statsReducer from './slices/stats';\n\nconst persistConfig = {\n  key: 'root',\n  storage: AsyncStorage\n}\n\nconst reducers = combineReducers({\n  settings: settingsReducer,\n  quiz: quizReducer,\n  stats: statsReducer\n});\nconst persistReducers = persistReducer(persistConfig, reducers)\n\n\nexport const store = configureStore({\n  reducer: persistReducers,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: false,\n    }),\n});\n\nexport const persistor = persistStore(store)","import { StatusBar } from 'expo-status-bar';\nimport React, { useEffect } from 'react';\nimport { useFonts } from 'expo-font';\nimport * as Progress from 'react-native-progress';\nimport HomeScreen from './components/HomeScreen/HomeScreen';\nimport QuizScreen from './components/QuizScreen/QuizScreen';\nimport StatsScreen from './components/StatScreen/StatsScreen';\nimport SettingsScreen from './components/SettingsScreen/SettingsScreen';\nimport AboutScreen from './components/AboutScreen/AboutScreen';\nimport Entries from './assets/data/QuizEntries';\nimport 'react-native-gesture-handler';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Provider } from 'react-redux';\nimport { persistor } from './redux/store';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RotateColor } from './redux/slices/settings'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { store } from './redux/store';\nimport { SetNewQuiz } from './redux/slices/quiz';\nimport { Colors } from './redux/slices/settings';\nimport { Platform } from 'react-native';\n\n\n\nconst Stack = createStackNavigator();\n\nconst AppWrapper = () => {\n  return (\n    <Provider store={store}>\n       <PersistGate persistor={persistor}>  \n      <App />\n       </PersistGate>  \n    </Provider>\n  )\n}\n\nfunction App() {\n\n  const [fontsLoaded] = useFonts({\n    'Poppins-Light': require('./assets/fonts/Poppins-Light.ttf'),\n    'Poppins-Regular': require('./assets/fonts/Poppins-Regular.ttf'),\n    'Poppins-Italic': require('./assets/fonts/Poppins-Italic.ttf'),\n    'Poppins-Bold': require('./assets/fonts/Poppins-Bold.ttf'),\n    'Poppins-ExtraBoldItalic': require('./assets/fonts/Poppins-ExtraBoldItalic.ttf'),\n    'Poppins-ExtraBold': require('./assets/fonts/Poppins-ExtraBold.ttf'),\n  });\n  const dispatch = useDispatch();\n\n  const newQuiz = useSelector(state => state.quiz.newQuiz);\n  useEffect(() => {\n    if (newQuiz) {\n      dispatch(SetNewQuiz(false));\n      for (var i = Entries.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [Entries[i], Entries[j]] = [Entries[j], Entries[i]];\n    }\n    }\n  },[newQuiz]);\n\n  const totalCount = Entries.length;\n\n  const shownQuestion = useSelector(state => state.quiz.shownQuestion)\n\n  const correctAnswers = Entries.map(({ correct }) => correct)\n\n  const colors = useSelector(Colors)\n\n\n  const allColorsHelper = useSelector(state => state.settings.allColorsHelper)\n\n  useEffect(() => { \n    dispatch(RotateColor()) }, [shownQuestion]);\n\n  if (!fontsLoaded) {\n    return <Progress.CircleSnail color={['red', 'green', 'blue']} />\n  }\n\n  return (\n    <>\n      <StatusBar style={(allColorsHelper == 1) ? \"dark\" : \"light\"} />\n      <NavigationContainer>\n        <Stack.Navigator>\n\n          <Stack.Screen name=\"HomeScreen\" options={{ headerShown: false }}>\n            {(props) => <HomeScreen  {...props} />}\n          </Stack.Screen>\n\n          <Stack.Screen name=\"QuizScreen\" \n            options={{\n              headerShown: (Platform.OS === 'web'),\n              title: 'Quiz',\n              headerStyle: {\n                backgroundColor: colors.dark,\n                borderBottomWidth: 0,\n              },\n              headerTintColor: colors.light,\n              headerTitleStyle: {\n                fontFamily: 'Poppins-Regular',\n                fontSize: 40,\n  \n              },\n            }}\n          >\n            {(props) => <QuizScreen {...props} totalCount={totalCount} correctAnswers={correctAnswers}\n                          shownQuestion={shownQuestion} />}\n          </Stack.Screen>\n\n          <Stack.Screen name=\"StatsScreen\" \n            options={{\n              headerShown: (Platform.OS === 'web'),\n              title: 'Statistics',\n              headerStyle: {\n                backgroundColor: colors.dark,\n                borderBottomWidth: 0,\n              },\n              headerTintColor: colors.light,\n              headerTitleStyle: {\n                fontFamily: 'Poppins-Regular',\n                fontSize: 40,\n  \n              },\n            }}\n          >\n            {(props) => <StatsScreen {...props} correctAnswers={correctAnswers} />}\n          </Stack.Screen>\n\n          <Stack.Screen name=\"SettingsScreen\" \n            options={{\n              headerShown: (Platform.OS === 'web'),\n              title: 'Settings',\n              headerStyle: {\n                backgroundColor: colors.dark,\n                borderBottomWidth: 0,\n              },\n              headerTintColor: colors.light,\n              headerTitleStyle: {\n                fontFamily: 'Poppins-Regular',\n                fontSize: 40,\n  \n              },\n            }}\n\n          >\n            {(props) =>  <SettingsScreen {...props} />}\n          </Stack.Screen>\n\n          <Stack.Screen name=\"AboutScreen\" \n          options={{\n            headerShown: (Platform.OS === 'web'),\n            title: 'About',\n            headerStyle: {\n              backgroundColor: colors.dark,\n              borderBottomWidth: 0,\n            },\n            headerTintColor: colors.light,\n            headerTitleStyle: {\n              fontFamily: 'Poppins-Regular',\n              fontSize: 40,\n\n            },\n          }}\n\n          \n          >\n            {(props) =>  <AboutScreen {...props} />}\n          </Stack.Screen>\n\n        </Stack.Navigator>\n      </NavigationContainer>\n    </>\n  )\n\n\n}\n\nexport default AppWrapper;","module.exports = __webpack_public_path__ + \"static/media/check-icon.6f6371b0.png\";","module.exports = __webpack_public_path__ + \"static/media/cross-icon.c96b3d1c.png\";","module.exports = __webpack_public_path__ + \"./fonts/Poppins-Light.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Poppins-Regular.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Poppins-Italic.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Poppins-Bold.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Poppins-ExtraBoldItalic.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Poppins-ExtraBold.ttf\";"],"sourceRoot":""}