{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { darkColors, lightColors } from \"../../assets/colors/colors\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SetColorIndex } from \"../../redux/slices/settings\";\nimport { SetDiscoveryMode } from \"../../redux/slices/settings\";\nimport { SetAllColors } from \"../../redux/slices/settings\";\nimport { SetAllColorsHelper } from \"../../redux/slices/settings\";\nimport { Colors } from \"../../redux/slices/settings\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function SettingsScreen() {\n  var colors = useSelector(Colors);\n  var colorCodes = [\"Navy\", \"Blue Sky\", \"Purple Monarchy\", \"Toffee\", \"Orangica\", \"Pink Princess\", \"Deep Eclipse\", \"Moon Silver\", \"Lavender\", \"Pitch Black\", \"Blue Sailor\", \"Lime\"];\n  var dispatch = useDispatch();\n  var _ref = [useSelector(function (state) {\n    return state.settings.colorIndex;\n  }), function (payload) {\n    return dispatch(SetColorIndex(payload));\n  }],\n      colorIndex = _ref[0],\n      setColorIndex = _ref[1];\n  var _ref2 = [useSelector(function (state) {\n    return state.settings.discoveryMode;\n  }), function (payload) {\n    return dispatch(SetDiscoveryMode(payload));\n  }],\n      discoveryMode = _ref2[0],\n      setDiscoveryMode = _ref2[1];\n  var _ref3 = [useSelector(function (state) {\n    return state.settings.allColors;\n  }), function (payload) {\n    return dispatch(SetAllColors(payload));\n  }],\n      allColors = _ref3[0],\n      setAllColors = _ref3[1];\n  var _ref4 = [useSelector(function (state) {\n    return state.settings.allColorsHelper;\n  }), function (payload) {\n    return dispatch(SetAllColorsHelper(payload));\n  }],\n      allColorsHelper = _ref4[0],\n      setAllColorsHelper = _ref4[1];\n  var shownQuestion = useSelector(function (state) {\n    return state.quiz.shownQuestion;\n  });\n  return _jsxs(View, {\n    style: [styles.container, {\n      backgroundColor: colors.dark\n    }],\n    children: [Platform.OS !== 'web' && _jsx(View, {\n      style: styles.logoContainer,\n      children: _jsx(Text, {\n        style: [styles.logo, {\n          color: colors.light\n        }],\n        children: \"Settings\"\n      })\n    }), _jsx(View, {\n      style: [styles.settingContainer, {\n        backgroundColor: colors.light,\n        borderColor: colors.dark\n      }],\n      children: _jsx(TouchableOpacity, {\n        children: _jsxs(Text, {\n          style: [styles.settingText, {\n            color: colors.dark\n          }],\n          onPress: function onPress() {\n            if (allColorsHelper == 1) {\n              setAllColors(darkColors);\n              setAllColorsHelper(0);\n            } else {\n              setAllColors(lightColors);\n              setAllColorsHelper(1);\n            }\n          },\n          children: [\"Theme: \", allColorsHelper === 1 ? \"Light\" : \"Dark\"]\n        })\n      })\n    }), _jsx(View, {\n      style: [styles.settingContainer, {\n        backgroundColor: colors.light,\n        borderColor: colors.dark\n      }],\n      children: _jsx(TouchableOpacity, {\n        children: _jsxs(Text, {\n          style: [styles.settingText, {\n            color: colors.dark\n          }],\n          onPress: function onPress() {\n            setDiscoveryMode(!discoveryMode);\n          },\n          children: [\"Discovery Mode: \", discoveryMode ? \"On\" : \"Off\"]\n        })\n      })\n    }), _jsx(View, {\n      opacity: discoveryMode ? 0.8 : 1.0,\n      style: [styles.settingContainer, {\n        backgroundColor: colors.light,\n        borderColor: colors.dark\n      }],\n      children: _jsx(TouchableOpacity, {\n        children: _jsxs(Text, {\n          style: [styles.settingText, {\n            color: colors.dark\n          }],\n          onPress: function onPress() {\n            if (!discoveryMode) {\n              setColorIndex((colorIndex + 1) % colorCodes.length);\n            }\n          },\n          children: [\"Color Pallete: \", colorCodes[colorIndex]]\n        })\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  logo: {\n    fontSize: 40,\n    fontFamily: 'Poppins-Regular',\n    textAlign: 'left'\n  },\n  logoContainer: {\n    marginTop: 50,\n    marginBottom: 10,\n    marginHorizontal: 20\n  },\n  settingContainer: {\n    minWidth: '90%',\n    borderWidth: 2,\n    marginHorizontal: 20,\n    borderRadius: 10,\n    padding: 10,\n    marginVertical: 10\n  },\n  settingText: {\n    fontFamily: 'Poppins-Bold',\n    fontSize: 17,\n    textAlign: 'left'\n  }\n});","map":{"version":3,"names":["darkColors","lightColors","useDispatch","useSelector","SetColorIndex","SetDiscoveryMode","SetAllColors","SetAllColorsHelper","Colors","SettingsScreen","colors","colorCodes","dispatch","state","settings","colorIndex","payload","setColorIndex","discoveryMode","setDiscoveryMode","allColors","setAllColors","allColorsHelper","setAllColorsHelper","shownQuestion","quiz","styles","container","backgroundColor","dark","Platform","OS","logoContainer","logo","color","light","settingContainer","borderColor","settingText","length","StyleSheet","create","flex","fontSize","fontFamily","textAlign","marginTop","marginBottom","marginHorizontal","minWidth","borderWidth","borderRadius","padding","marginVertical"],"sources":["/Users/essam/Documents/GitHub/quizzery.github.io/components/SettingsScreen/SettingsScreen.js"],"sourcesContent":["import { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport {darkColors, lightColors} from '../../assets/colors/colors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SetColorIndex } from '../../redux/slices/settings';\nimport { SetDiscoveryMode } from '../../redux/slices/settings';\nimport { SetAllColors} from '../../redux/slices/settings';\nimport { SetAllColorsHelper } from '../../redux/slices/settings';\nimport { Colors } from '../../redux/slices/settings';\nimport { Platform } from 'react-native';\n\nexport default function SettingsScreen() {\n   const colors = useSelector(Colors)\n   const colorCodes = [\"Navy\", \"Blue Sky\", \"Purple Monarchy\", \"Toffee\", \"Orangica\", \"Pink Princess\", \"Deep Eclipse\", \"Moon Silver\", \"Lavender\", \"Pitch Black\", \"Blue Sailor\", \"Lime\"];\n   const dispatch = useDispatch();\n   const [colorIndex, setColorIndex] = [ useSelector(state => state.settings.colorIndex), (payload)=> dispatch(SetColorIndex(payload))];\n   const [discoveryMode, setDiscoveryMode] = [ useSelector(state => state.settings.discoveryMode), (payload)=> dispatch(SetDiscoveryMode(payload))];\n   const [allColors, setAllColors] = [ useSelector(state => state.settings.allColors), (payload)=> dispatch(SetAllColors(payload))];\n   const [allColorsHelper, setAllColorsHelper] = [useSelector(state => state.settings.allColorsHelper), (payload)=>dispatch(SetAllColorsHelper(payload))]\n   const shownQuestion = useSelector(state => state.quiz.shownQuestion)\n\n\n   return (\n      <View style={[styles.container, {backgroundColor: colors.dark}]}>\n         {(Platform.OS !== 'web')&&<View style={styles.logoContainer}>\n            <Text style={[styles.logo, { color: colors.light }]}>\n               Settings\n            </Text>\n         </View>}\n         <View style={[styles.settingContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n            <TouchableOpacity>\n               <Text style={[styles.settingText, { color: colors.dark, }]} onPress={() => { \n                  if(allColorsHelper == 1){\n                     setAllColors(darkColors)\n                     setAllColorsHelper(0)\n                  }\n                  else {\n                     setAllColors(lightColors)\n                     setAllColorsHelper(1)\n                  }\n                  \n               }}>\n                  Theme: {(allColorsHelper === 1) ? \"Light\" : \"Dark\"}\n               </Text>\n            </TouchableOpacity>\n         </View>\n\n         <View style={[styles.settingContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n            <TouchableOpacity>\n               <Text style={[styles.settingText, { color: colors.dark, }]} onPress={() => { \n                  setDiscoveryMode(!discoveryMode);\n               }}>\n                  Discovery Mode: {(discoveryMode) ? \"On\" : \"Off\"}\n               </Text>\n            </TouchableOpacity>\n         </View>\n\n         <View opacity={(discoveryMode)? 0.8 : 1.0} style={[styles.settingContainer, { backgroundColor: colors.light, borderColor: colors.dark }]}>\n            <TouchableOpacity>\n               <Text style={[styles.settingText, { color: colors.dark, }]} onPress={() => { \n                  if(!discoveryMode) {\n                  setColorIndex((colorIndex + 1)%(colorCodes.length))\n                  }\n                  }}>\n                Color Pallete: {colorCodes[colorIndex]} \n               </Text>\n            </TouchableOpacity>\n         </View>\n\n      </View>\n   )\n}\n\n\nconst styles = StyleSheet.create({\n   container: {\n      flex: 1,\n\n   },\n   logo: {\n      fontSize: 40,\n      fontFamily: 'Poppins-Regular',\n      textAlign: 'left',\n   },\n   logoContainer: {\n      marginTop: 50,\n      marginBottom: 10,\n      marginHorizontal: 20\n   },\n\n\n   settingContainer: {\n      minWidth: '90%',\n      borderWidth: 2,\n      marginHorizontal: 20,\n      borderRadius: 10,\n      padding: 10,\n      marginVertical: 10\n   },\n   settingText: {\n      fontFamily: 'Poppins-Bold',\n      fontSize: 17,\n      textAlign: 'left'\n   }\n\n});\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}