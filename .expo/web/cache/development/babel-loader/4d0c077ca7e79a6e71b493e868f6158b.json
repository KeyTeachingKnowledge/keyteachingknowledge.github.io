{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { darkColors, lightColors } from \"../../assets/colors/colors\";\nvar initialState = {\n  colorIndex: 0,\n  discoveryMode: false,\n  comingFromHome: true,\n  allColors: lightColors,\n  allColorsHelper: 1\n};\nvar reducers = {\n  SetColorIndex: function SetColorIndex(state, action) {\n    state.colorIndex = action.payload;\n  },\n  SetDiscoveryMode: function SetDiscoveryMode(state, action) {\n    state.discoveryMode = action.payload;\n  },\n  SetComingFromHome: function SetComingFromHome(state, action) {\n    state.comingFromHome = action.payload;\n  },\n  SetAllColors: function SetAllColors(state, action) {\n    state.allColors = action.payload;\n  },\n  SetAllColorsHelper: function SetAllColorsHelper(state, action) {\n    state.allColorsHelper = action.payload;\n  },\n  RotateColor: function RotateColor(state) {\n    if (state.discoveryMode) {\n      state.colorIndex = (state.colorIndex + 1) % state.allColors.length;\n    }\n  }\n};\nvar settingsSlice = createSlice({\n  name: \"settings\",\n  initialState: initialState,\n  reducers: reducers\n});\nvar SetColorIndex = settingsSlice.actions.SetColorIndex;\nexport { SetColorIndex };\nvar SetDiscoveryMode = settingsSlice.actions.SetDiscoveryMode;\nexport { SetDiscoveryMode };\nvar SetComingFromHome = settingsSlice.actions.SetComingFromHome;\nexport { SetComingFromHome };\nvar SetAllColors = settingsSlice.actions.SetAllColors;\nexport { SetAllColors };\nvar RotateColor = settingsSlice.actions.RotateColor;\nexport { RotateColor };\nvar SetAllColorsHelper = settingsSlice.actions.SetAllColorsHelper;\nexport { SetAllColorsHelper };\nexport var Colors = function Colors(state) {\n  return state.settings.allColors[state.settings.colorIndex];\n};\nexport default settingsSlice.reducer;","map":{"version":3,"names":["createSlice","darkColors","lightColors","initialState","colorIndex","discoveryMode","comingFromHome","allColors","allColorsHelper","reducers","SetColorIndex","state","action","payload","SetDiscoveryMode","SetComingFromHome","SetAllColors","SetAllColorsHelper","RotateColor","length","settingsSlice","name","actions","Colors","settings","reducer"],"sources":["/Users/essam/Documents/GitHub/quizzery.github.io/redux/slices/settings.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\nimport {darkColors, lightColors} from '../../assets/colors/colors';\n\n\nconst initialState = {\n   colorIndex: 0,\n   discoveryMode: false,\n   comingFromHome: true,\n   allColors: lightColors,\n   allColorsHelper: 1\n }\n \n const reducers = {\n \n   SetColorIndex(state, action) {\n      state.colorIndex = action.payload\n    },\n    SetDiscoveryMode(state, action) {\n      state.discoveryMode = action.payload\n    },\n    SetComingFromHome(state, action) {\n      state.comingFromHome = action.payload\n    },\n    SetAllColors(state, action) {\n      state.allColors = action.payload\n    },\n    SetAllColorsHelper(state, action) {\n      state.allColorsHelper = action.payload\n    },\n    RotateColor(state) {\n       if(state.discoveryMode){\n         state.colorIndex = (state.colorIndex + 1) % state.allColors.length\n         }\n    }\n\n }\n\nconst settingsSlice = createSlice({name: \"settings\", initialState, reducers})\n\nexport const { SetColorIndex } = settingsSlice.actions\nexport const { SetDiscoveryMode } = settingsSlice.actions\nexport const { SetComingFromHome } = settingsSlice.actions\nexport const { SetAllColors } = settingsSlice.actions\nexport const { RotateColor } = settingsSlice.actions\nexport const { SetAllColorsHelper } = settingsSlice.actions \nexport const Colors = (state) => state.settings.allColors[state.settings.colorIndex];\n\nexport default settingsSlice.reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAAQC,UAAR,EAAoBC,WAApB;AAGA,IAAMC,YAAY,GAAG;EAClBC,UAAU,EAAE,CADM;EAElBC,aAAa,EAAE,KAFG;EAGlBC,cAAc,EAAE,IAHE;EAIlBC,SAAS,EAAEL,WAJO;EAKlBM,eAAe,EAAE;AALC,CAArB;AAQC,IAAMC,QAAQ,GAAG;EAEfC,aAFe,yBAEDC,KAFC,EAEMC,MAFN,EAEc;IAC1BD,KAAK,CAACP,UAAN,GAAmBQ,MAAM,CAACC,OAA1B;EACD,CAJa;EAKdC,gBALc,4BAKGH,KALH,EAKUC,MALV,EAKkB;IAC9BD,KAAK,CAACN,aAAN,GAAsBO,MAAM,CAACC,OAA7B;EACD,CAPa;EAQdE,iBARc,6BAQIJ,KARJ,EAQWC,MARX,EAQmB;IAC/BD,KAAK,CAACL,cAAN,GAAuBM,MAAM,CAACC,OAA9B;EACD,CAVa;EAWdG,YAXc,wBAWDL,KAXC,EAWMC,MAXN,EAWc;IAC1BD,KAAK,CAACJ,SAAN,GAAkBK,MAAM,CAACC,OAAzB;EACD,CAba;EAcdI,kBAdc,8BAcKN,KAdL,EAcYC,MAdZ,EAcoB;IAChCD,KAAK,CAACH,eAAN,GAAwBI,MAAM,CAACC,OAA/B;EACD,CAhBa;EAiBdK,WAjBc,uBAiBFP,KAjBE,EAiBK;IAChB,IAAGA,KAAK,CAACN,aAAT,EAAuB;MACrBM,KAAK,CAACP,UAAN,GAAmB,CAACO,KAAK,CAACP,UAAN,GAAmB,CAApB,IAAyBO,KAAK,CAACJ,SAAN,CAAgBY,MAA5D;IACC;EACL;AArBa,CAAjB;AAyBD,IAAMC,aAAa,GAAGpB,WAAW,CAAC;EAACqB,IAAI,EAAE,UAAP;EAAmBlB,YAAY,EAAZA,YAAnB;EAAiCM,QAAQ,EAARA;AAAjC,CAAD,CAAjC;AAEO,IAAQC,aAAR,GAA0BU,aAAa,CAACE,OAAxC,CAAQZ,aAAR;;AACA,IAAQI,gBAAR,GAA6BM,aAAa,CAACE,OAA3C,CAAQR,gBAAR;;AACA,IAAQC,iBAAR,GAA8BK,aAAa,CAACE,OAA5C,CAAQP,iBAAR;;AACA,IAAQC,YAAR,GAAyBI,aAAa,CAACE,OAAvC,CAAQN,YAAR;;AACA,IAAQE,WAAR,GAAwBE,aAAa,CAACE,OAAtC,CAAQJ,WAAR;;AACA,IAAQD,kBAAR,GAA+BG,aAAa,CAACE,OAA7C,CAAQL,kBAAR;;AACP,OAAO,IAAMM,MAAM,GAAG,SAATA,MAAS,CAACZ,KAAD;EAAA,OAAWA,KAAK,CAACa,QAAN,CAAejB,SAAf,CAAyBI,KAAK,CAACa,QAAN,CAAepB,UAAxC,CAAX;AAAA,CAAf;AAEP,eAAegB,aAAa,CAACK,OAA7B"},"metadata":{},"sourceType":"module"}